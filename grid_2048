import random as rd

THEMES = {"0": {"name": "Default", 0: "", 2: "2", 4: "4", 8: "8", 16: "16", 32: "32", 64: "64", 128: "128", 256: "256", 512: "512", 1024: "1024", 2048: "2048", 4096: "4096", 8192: "8192"}, "1": {"name": "Chemistry", 0: "", 2: "H", 4: "He", 8: "Li", 16: "Be", 32: "B", 64: "C", 128: "N", 256: "O", 512: "F", 1024: "Ne", 2048: "Na", 4096: "Mg", 8192: "Al"}, "2": {"name": "Alphabet", 0: "", 2: "A", 4: "B", 8: "C", 16: "D", 32: "E", 64: "F", 128: "G", 256: "H", 512: "I", 1024: "J", 2048: "K", 4096: "L", 8192: "M"}}

def grid_get_value(grid,i,j):
    return grid[i][j]

def create_grid(n):
    game_grid = []
    for i in range(0,n):
        game_grid.append([' ']*n)
    return game_grid

print(create_grid(2))


def get_value_new_tile():
    n = rd.randint(1,10)
    if n >= 2 :
        return 2
    else :
        return 4

def get_all_tiles(grid):
    tiles = []

    for ligne in grid :
        for c in ligne :
            x = c
            if c == ' ' :
                x = 0
            tiles.append(x)
    return tiles

def get_empty_tiles_positions(grid):
    n = len(grid)
    empty_tiles = []
    for i in range(n):
        for j in range(n):
            if grid[i][j] in [' ',0] :
                empty_tiles.append((i,j))
    return empty_tiles

def get_new_position(grid):
    empty_tiles = get_empty_tiles_positions(grid)
    a, b = rd.choice(empty_tiles)
    grid[a][b] = 0
    return a, b

def grid_add_new_tile(grid):
    a,b = get_new_position(grid)
    x = get_value_new_tile()
    grid[a][b] = x
    return grid

def init_game(n):
    grid = create_grid(n)
    grid = grid_add_new_tile(grid)
    grid = grid_add_new_tile(grid)

    return grid

def grid_to_string_with_size(grid, n):
    taille_max = len(str(max([max(l) for l in grid])))

    affichage = (' ' + '='*taille_max)*n + '\n'


    for i in range(n) :
        for j in range(n) :
            affichage += '|' + ' '*(taille_max - len(str(grid[i][j]))) + str(grid[i][j])
        affichage += '|\n'+(' ' + '='*taille_max)*n + '\n'


    return affichage

def long_value(grid):
    return len(str(max([max(l) for l in grid])))

grid = [[256,0,2048],[0,2,4],[0,0,0]]


def long_value_with_theme(grid, theme):
    max = 0
    n = len(grid)

    for i in range(n):
        for j in range(n):
            a = len(str(THEMES[theme][grid[i][j]]))
            if a > max :
                max = a
    return max


def grid_to_string_with_size_and_theme(grid,theme,taille_max):
    n = len(grid)
    affichage = (' ' + '='*taille_max)*n + '\n'


    for i in range(n) :
        for j in range(n) :
            affichage += '|' + ' '*(taille_max - len(str(THEMES[theme][grid[i][j]]))) + str(THEMES[theme][grid[i][j]])
        affichage += '|\n'+(' ' + '='*taille_max)*n + '\n'


    return affichage

print(grid_to_string_with_size_and_theme(grid,'1',long_value_with_theme(grid, '1')))
